name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  # Code Quality and Linting
  lint:
    name: üîç Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Check code formatting
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"

  # Security Scanning
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm run security:audit

      - name: Run custom security scan
        run: npm run security:scan

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            security-report.json
            npm-audit.json

  # Unit and Integration Tests
  test:
    name: üß™ Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, accessibility]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: npm run test:coverage

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: npm run test -- --testPathPattern=integration

      - name: Run accessibility tests
        if: matrix.test-type == 'accessibility'
        run: npm run test:a11y

      - name: Upload test coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results.json

  # Build Application
  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    needs: [lint, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            out/
          retention-days: 7

  # End-to-End Tests
  e2e:
    name: üé≠ E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Start application
        run: npm run start &
        env:
          NODE_ENV: production

      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/

  # Performance Tests
  performance:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Start application
        run: npm run start &
        env:
          NODE_ENV: production

      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run performance tests
        run: npm run test:performance

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            .lighthouseci/
            performance-report.json

  # Accessibility Audit
  accessibility:
    name: ‚ôø Accessibility Audit
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Start application
        run: npm run start &
        env:
          NODE_ENV: production

      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run accessibility tests
        run: npx playwright test --grep "accessibility"

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-results
          path: |
            accessibility-report.json
            axe-results/

  # Quality Gate
  quality-gate:
    name: üö¶ Quality Gate
    runs-on: ubuntu-latest
    needs: [test, e2e, performance, accessibility]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Check test results
        run: |
          echo "Checking quality gate criteria..."
          
          # Check if any jobs failed
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "‚ùå Tests failed"
            exit 1
          fi
          
          if [ "${{ needs.e2e.result }}" != "success" ]; then
            echo "‚ùå E2E tests failed"
            exit 1
          fi
          
          if [ "${{ needs.performance.result }}" != "success" ]; then
            echo "‚ö†Ô∏è Performance tests failed"
            # Don't fail the build for performance issues, just warn
          fi
          
          if [ "${{ needs.accessibility.result }}" != "success" ]; then
            echo "‚ùå Accessibility tests failed"
            exit 1
          fi
          
          echo "‚úÖ Quality gate passed!"

  # Deploy (only on main branch)
  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-args: '--prod'

  # Notification
  notify:
    name: üì¢ Notify
    runs-on: ubuntu-latest
    needs: [deploy, quality-gate]
    if: always()
    steps:
      - name: Notify success
        if: needs.quality-gate.result == 'success'
        run: |
          echo "‚úÖ Pipeline completed successfully!"
          echo "Deployment status: ${{ needs.deploy.result }}"

      - name: Notify failure
        if: needs.quality-gate.result == 'failure'
        run: |
          echo "‚ùå Pipeline failed!"
          echo "Please check the logs for details."